name: buildCSharpSDK

on: 
  push:
    branches: [ develop ]

jobs:
  build-csharp:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    strategy:
      # fail-fast: Default is true, switch to false to allow one platform to fail and still run others
      fail-fast: false
      matrix:
        name: [Ubuntu, macOS]
        include:
        - name: Ubuntu
          os: ubuntu-18.04
        - name: macOS
          os: macos-10.15

    steps:
      - name: "Checkout develop Branch"
        uses: actions/checkout@v2
        with:
          ref: develop

      - uses: actions/setup-python@v2
        with:
          python-version: '3.8.x'

      - name: Setup CSharp
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '5.0.x'


      - name: Install conan
        run: |
          python --version
          pip install conan
          conan --version
          echo "Enabling conan revisions and setting parallel_download"
          conan config set general.revisions_enabled=True
          conan config set general.parallel_download=8


      - name: Compile Ubuntu
        if: runner.name == 'Ubuntu'
        shell: bash
        run: |
          set -x
          mkdir build
          cd build
          cmake -DCMAKE_BUILD_TYPE=Release \
                -DBUILD_CSHARP_BINDINGS=ON -DBUILD_NUGET_PACKAGE=OFF \
                -DBUILD_TESTING=OFF -DBUILD_RUBY_BINDINGS=OFF -DBUILD_CLI=OFF \
                -DBUILD_PACKAGE=OFF \
                ../
          
          make -j2


      - name: Compile macOS
        if: runner.name == 'macOS'
        shell: bash
        run: |
          set -x
          export CC=clang
          export CMAKE_OSX_ARCHITECTURES=x86_64
          mkdir build
          cd build
          cmake -DCMAKE_BUILD_TYPE=Release \
                -DBUILD_CSHARP_BINDINGS=ON -DBUILD_NUGET_PACKAGE=OFF \
                -DBUILD_TESTING=OFF -DBUILD_RUBY_BINDINGS=OFF -DBUILD_CLI=OFF \
                -DBUILD_PACKAGE=OFF \
                ../

          make -j3


      - name: list files
        run: |
          echo "Listing the top directory=========================================="
          ls

          echo "Listing ./build/=========================================="
          ls ./build/

          echo "Listing ./build/Products/=========================================="
          ls -R ./build/Products

      - name: Tests
        run: |
          dotnet test csharp/examples/OpenStudio.Tests/OpenStudio.Tests.csproj

      - name: Zip Build Artifact
        run: |
          zip -r CSharp_${{ matrix.name }}.zip ./build/csharp_wrapper/bin/Release/
          dotnet clean ./build/csharp_wrapper/
          zip -r CSharp_${{ matrix.name }}_Src.zip ./build/csharp_wrapper
          
      - name: Upload artifact
        uses: actions/upload-artifact@v1
        with:
          name: CSharp_${{ matrix.name }}
          path: CSharp_${{ matrix.name }}.zip

      - name: Upload artifact
        uses: actions/upload-artifact@v1
        with:
          name: CSharp_${{ matrix.name }}_Src
          path: CSharp_${{ matrix.name }}_Src.zip


      - name: The job has failed
        if: ${{ failure() }}
        run: |
          zip -r ${{ matrix.name }}_Failed.zip ./build/csharp_wrapper/*  


      - name: Upload artifact
        if: ${{ failure() }}
        uses: actions/upload-artifact@v1
        with:
          name: ${{ matrix.name }}_Failed
          path: ${{ matrix.name }}_Failed.zip

