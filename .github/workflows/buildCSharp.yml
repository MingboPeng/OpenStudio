name: buildCSharpSDK

on: 
  push:
    branches: [ develop ]

jobs:
  build-ubuntu:
    name: "Build CSharp SDK-Ubuntu"
    runs-on: ubuntu-18.04

    steps:
      - name: "Checkout develop Branch"
        uses: actions/checkout@v2
        with:
          ref: develop

      - uses: actions/setup-python@v2
        with:
          python-version: '3.8.x'

      - name: Setup CSharp
        shell: bash
        run: |
          set -x
          cmake -E make_directory ./build
          wget https://packages.microsoft.com/config/ubuntu/18.04/packages-microsoft-prod.deb -O packages-microsoft-prod.deb
          sudo dpkg -i packages-microsoft-prod.deb
          sudo apt-get update
          sudo apt-get install -y apt-transport-https
          sudo apt-get install -y dotnet-sdk-3.1
          
      - name: Install conan
        shell: bash
        run: |
          set -x
          python --version
          pip install conan
          conan --version
          echo "Enabling conan revisions and setting parallel_download"
          conan config set general.revisions_enabled=True
          conan config set general.parallel_download=8

      - name: Compile
        shell: bash
        working-directory: ./build
        run: |
          cmake -DCMAKE_BUILD_TYPE=Release \
                -DBUILD_CSHARP_BINDINGS=ON -DBUILD_NUGET_PACKAGE=ON \
                -DBUILD_TESTING=OFF -DBUILD_RUBY_BINDINGS=OFF \
                -DBUILD_PACKAGE=OFF  -DCPACK_BINARY_DEB=OFF  -DCPACK_BINARY_TGZ=OFF \
                -DCPACK_BINARY_IFW=OFF -DCPACK_BINARY_NSIS=OFF -DCPACK_BINARY_RPM=OFF -DCPACK_BINARY_STGZ=OFF \
                -DCPACK_BINARY_TBZ2=OFF -DCPACK_BINARY_TXZ=OFF -DCPACK_BINARY_TZ=OFF ../
          
          make -j2

      - name: list files
        run: |
          echo "Listing the top directory=========================================="
          ls

          echo "Listing ./build/=========================================="
          ls ./build/

          echo "Listing ./build/Products/=========================================="
          ls -R ./build/Products


      - name: Zip Build Artifact
        run: |
          mkdir ./build/zip
          cp ./build/Products/*.so ./build/zip
          cp ./build/Products/csharp/Release/ ./build/zip

          zip -r OpenStudio_CSharpSDK.zip ./build/zip
          
      - name: Upload artifact
        uses: actions/upload-artifact@v1
        with:
          name: OpenStudio_CSharpSDK
          path: OpenStudio_CSharpSDK.zip


      - name: The job has failed
        if: ${{ failure() }}
        run: |
          zip -r Linux_Failed.zip ./build/csharp_wrapper/*  


      - name: Upload artifact
        if: ${{ failure() }}
        uses: actions/upload-artifact@v1
        with:
          name: Linux_Failed
          path: Linux_Failed.zip


  build-osx:
    name: "Build CSharp SDK-Mac"
    runs-on: macos-latest

    steps:
      - name: "Checkout develop Branch"
        uses: actions/checkout@v2
        with:
          ref: develop

      - uses: actions/setup-python@v2
        with:
          python-version: '3.8.x'

      - name: Setup CSharp
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '3.1.x'
          
      - name: Install conan
        shell: bash
        run: |
          set -x
          python --version
          pip install conan
          conan --version
          echo "Enabling conan revisions and setting parallel_download"
          conan config set general.revisions_enabled=True
          conan config set general.parallel_download=8

      - run: |
          xcode-select -p
          cc --version
          gcc --version

      - name: Compile
        shell: bash
        run: |
          set -x
          export CC=clang
          export CMAKE_OSX_ARCHITECTURES=x86_64
          mkdir build
          cd build
          cmake -DCMAKE_BUILD_TYPE=Release \
                -DBUILD_CSHARP_BINDINGS=ON -DBUILD_NUGET_PACKAGE=OFF \
                -DBUILD_TESTING=OFF -DBUILD_RUBY_BINDINGS=OFF \
                -DBUILD_PACKAGE=OFF -DCPACK_BINARY_DEB=OFF -DCPACK_BINARY_TGZ=OFF \
                -DCPACK_BINARY_IFW=OFF -DCPACK_BINARY_NSIS=OFF -DCPACK_BINARY_RPM=OFF -DCPACK_BINARY_STGZ=OFF \
                -DCPACK_BINARY_TBZ2=OFF -DCPACK_BINARY_TXZ=OFF -DCPACK_BINARY_TZ=OFF \
                ../

          make -j2

      - name: list files
        run: |
          echo "Listing the top directory=========================================="
          ls

          echo "Listing ./build/=========================================="
          ls ./build/

          echo "Listing ./build/Products/=========================================="
          ls -R ./build/Products

      - name: Zip Build Artifact
        run: |
          mkdir ./build/zip
          cp ./build/Products/*.dylib ./build/zip
          mv ./build/Products/csharp/Release/ ./build/zip

          sudo zip -r OpenStudio_CSharpSDK.zip ./build/zip
          sudo zip -r OpenStduio_CSharp_Source.zip ./build/csharp_wrapper
          
      - name: Upload artifact
        uses: actions/upload-artifact@v1
        with:
          name: OpenStudio_CSharpSDK
          path: OpenStudio_CSharpSDK.zip

      - name: Upload artifact
        uses: actions/upload-artifact@v1
        with:
          name: OpenStduio_CSharp_Source
          path: OpenStduio_CSharp_Source.zip

      - name: The job has failed
        if: ${{ failure() }}
        run: |
          zip -r Mac_Failed.zip ./build/csharp_wrapper/*
          
      - name: Upload artifact
        if: ${{ failure() }}
        uses: actions/upload-artifact@v1
        with:
          name: Mac_Failed
          path: Mac_Failed.zip